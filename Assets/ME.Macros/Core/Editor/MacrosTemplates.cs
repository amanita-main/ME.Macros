using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.IO;

namespace ME.Macros {

	public static class MacrosTemplates {

		const string pattern = @"(\s?)#region\s+macros\s+([A-Za-z0-9]+)\s+(.*?)#endregion";

		const string macrosTemplate = @"#region macros {{NAME}}
/*
 * This code is auto-generated by Macros Module
 * Do not change anything
 */
{{CODE}}
#endregion";

		const string patternDefinition = @"#region\s+source\s+macros\s+([A-Za-z0-9]+)\s+(.*?)\s+#endregion";
		const string patternDefinitionName = @"#macros\s+([A-Za-z0-9]+)";

		public static bool ContainsMacros(this string text) {

			Regex rgx = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
			return rgx.IsMatch(text);

		}

		public static List<string> GetMacrosNames(this string text) {

			var names = new List<string>();

			Regex rgx = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
			var matches = rgx.Matches(text);

			foreach (Match match in matches) {

				names.Add(match.Groups[2].Value);

			}

			return names;

		}

		public static string RefreshMacros(this string sourceText, string macrosName, string macrosCode) {

			var macrosText = macrosTemplate.Replace("{{NAME}}", macrosName);
			macrosText = macrosText.Replace("{{CODE}}", macrosCode);

			Regex rgx = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
			var match = rgx.Match(sourceText);
			var spaces = match.Groups[1].Value;

			macrosText = macrosText.Replace("\n", "\n" + spaces);

			var pt = @"(\s?)#region\s+macros\s+" + macrosName + "\\s+(.*?)#endregion";

			rgx = new Regex(pt, RegexOptions.IgnoreCase | RegexOptions.Singleline);
			//Debug.Log(macrosName + ": " + sourceText + " => " + macrosText);
			sourceText = rgx.Replace(sourceText, spaces + macrosText);

			return sourceText;

		}

		public static bool ContainsMacrosDefinition(this string text) {

			Regex rgx = new Regex(patternDefinition, RegexOptions.IgnoreCase | RegexOptions.Singleline);
			return rgx.IsMatch(text);

		}

		public static Dictionary<string, string> GetMacrosDefinitions(this string text) {

			Regex rgx = new Regex(patternDefinition, RegexOptions.IgnoreCase | RegexOptions.Singleline);
			var matches = rgx.Matches(text);

			var dic = new Dictionary<string, string>();
			foreach (Match match in matches) {

				if (dic.ContainsKey(match.Groups[1].Value) == false) {

					dic.Add(match.Groups[1].Value, match.Groups[2].Value);

				}

			}

			return dic;

		}

	}

}